############## PLEASE CHANGE ##############

local_vars = {
  "developer" => {
    "os" => "osx",
    "provision" => true,
    "box" => "debian-7.1.0-amd64",
    "box_url" => "boxes/debian-7.1.0-amd64.box",
    "vm_memory" => 2048,
    "vm_cpus" => 2,
    "vm_gui" => false,
    "ipv4" => [
      {
        "ip" => "10.0.0.1",
        "domains" => [
          "dop-developer.local",
          "dop-developer",
          "packer-virtualbox"
        ]
      }
    ]
  }
}

global_vars = {
  "hostname" => "dop"
}

############## /PLEASE CHANGE ##############

$script = <<SCRIPT#!/bin/bash
if [ "`tail -1 /root/.profile`" = "mesg n" ]; then
  echo 'Patching basebox to prevent future `stdin: is not a tty` errors...'
  sed -i '$d' /root/.profile
  cat << 'EOH' >> /root/.profile
  if `tty -s`; then
    mesg n
  fi
EOH
fi
SCRIPT

Vagrant.require_plugin("bindler")
Vagrant.require_plugin("vagrant-librarian-chef")
Vagrant.require_plugin("vagrant-global-status")
Vagrant.require_plugin("vagrant-cachier")
Vagrant.require_plugin("vagrant-exec")

Vagrant.configure("2") do |config|
	config.ssh.forward_agent = true
	
	local_vars.each_pair do |name, options|
		global_config.vm.define "#{global_vars['hostname']}-#{name}" do |config|
			config.vm.hostname = "#{global_vars['hostname']}-#{name}"
		
			if options['provision'] then
				# librarian_chef
				if Vagrant.has_plugin?("vagrant-librarian-chef")
					config.librarian_chef.cheffile_dir = "."
				end
				
				# vagrant-cachier
				if Vagrant.has_plugin?("vagrant-cachier")
					config.cache.auto_detect = true
				end
				
				# vagrant-exec
				if Vagrant.has_plugin?("vagrant-exec")
					config.exec.folder = '/var/script'
				end
			end
			
			# network
			options['ipv4'].each do |entry|
				config.vm.network "private_network", ip: "#{entry['ip']}"
			end
			
			# shared folders
			# tbd
			
			# virtualbox
			config.vm.box = options['box']
			config.vm.box_url = options['box_url']
			
			# virtualbox options
			config.vm.provider "virtualbox" do |v|
				v.gui = options['vm_gui']
				v.customize ["modifyvm", :id, "--memory", options['vm_memory']]
				v.customize ["modifyvm", :id, "--cpus", options['vm_cpus']]
				v.customize ["modifyvm", :id, "--cpuexecutioncap", "98"]
			end
		
			if options['provision'] then
				# shell
				config.vm.provision "shell", inline: $script
				config.vm.provision "shell", inline: "sed -i 's/http.us.debian/ftp.de.debian/g' /etc/apt/sources.list"
				config.vm.provision "shell", inline: "sed -i 's/http.us.archive/ftp.de.archive/g' /etc/apt/sources.list"
				config.vm.provision "shell", inline: "apt-get update --fix-missing >/dev/null"
				config.vm.provision "shell", inline: "echo \"Europe/Berlin\" | sudo tee /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata"
				
				# chef solo
				config.vm.provision "chef_solo" do |chef|
					chef.cookbooks_path = ['../chef/cookbooks']
					chef.data_bags_path = ['../chef/data_bags']
					chef.encrypted_data_bag_secret_key_path = "../chef/.chef/data_bag_key"
					chef.environments_path = "../chef/environments"
					chef.roles_path = "../chef/roles"
					chef.add_role("vagrant")
					chef.environment = "development"
					chef.json = {
						'dop_base' => {
							'local_developer' => name,
							'hosts' => {
								'hostname' => "#{global_vars['hostname']}-#{name}",
								'ipv4' => options['ipv4']
							}
						}
					}
				end
			else
				config.vm.provision "shell", path: "provision.sh"
				config.vm.provision "shell", inline: "/var/script/prebuild_box.sh"
			end
		end
	end
end